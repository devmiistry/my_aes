#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/mman.h>
#include "hwlib.h"
#include "socal/socal.h"
#include "socal/hps.h"
#include "socal/alt_gpio.h"
#include "hps_0.h"

#define HW_REGS_BASE (ALT_STM_OFST)
#define HW_REGS_SPAN (0x04000000)
#define HW_REGS_MASK (HW_REGS_SPAN - 1)

int main()
{
    void *virtual_base;
    int fd;
    int loop_count;
    int led_direction;
    int led_mask;
    void *h2p_lw_led_addr;
    void *h2p_lw_coproc_addr;
    // map the address space for the LED registers into user space so we can interact with them.
    // we'll map in the entire CSR span of the HPS since we want to access various registers within that span

    printf("Calling fopen\n");

    if ((fd = open("/dev/mem", (O_RDWR | O_SYNC))) == -1)
    {
        printf("ERROR: could not open \"/dev/mem\"...\n");
        return (1);
    }

    printf("Creating mmap\n");

    virtual_base = mmap(NULL, HW_REGS_SPAN, (PROT_READ | PROT_WRITE), MAP_SHARED, fd, HW_REGS_BASE);

    h2p_lw_coproc_addr = virtual_base + ((unsigned long)(ALT_LWFPGASLVS_OFST + COPROCESSOR_BASE) & (unsigned long)(HW_REGS_MASK));

    if (virtual_base == MAP_FAILED)
    {
        printf("ERROR: mmap() failed...\n");
        close(fd);
        return (1);
    }

    h2p_lw_led_addr = virtual_base + ((unsigned long)(ALT_LWFPGASLVS_OFST + PIO_LED_BASE) & (unsigned long)(HW_REGS_MASK));

    // toggle the LEDs a bit
    loop_count = 0;
    led_mask = 0x01;
    led_direction = 0; // 0: left to right direction

    printf("Starting while loop, base address: %p, virtual_base = %p\n", h2p_lw_led_addr, virtual_base);

    while (loop_count < 1)
    {
        printf("In Loop, loop_count:%d, led_mask:%d, led_direction:%d\n", loop_count, led_mask, led_direction);

        // control led
        *(uint32_t *)h2p_lw_led_addr = ~led_mask;

        // wait 100ms
        usleep(100 * 1000);

        // update led mask
        if (led_direction == 0)
        {
            led_mask <<= 1;
            if (led_mask == (0x01 << (PIO_LED_DATA_WIDTH - 1)))
                led_direction = 1;
        }
        else
        {
            led_mask >>= 1;
            if (led_mask == 0x01)
            {
                led_direction = 0;
                loop_count++;
            }
        }
    }// while
    // clean up our memory mapping and exit
    if (munmap(virtual_base, HW_REGS_SPAN) != 0)
    {
        printf("ERROR: munmap() failed...\n");
        close(fd);
        return (1);
    }
    close(fd);
    return (0);
}